//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.12.28 at 10:05:13 PM CET 
//


package nl.games.xrebirth.generated.material_library;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for blendmodelookup.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="blendmodelookup">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="none"/>
 *     &lt;enumeration value="wireframe"/>
 *     &lt;enumeration value="wireframe_noculling"/>
 *     &lt;enumeration value="twosided"/>
 *     &lt;enumeration value="alpha1"/>
 *     &lt;enumeration value="solid_fading"/>
 *     &lt;enumeration value="alpha1_fading"/>
 *     &lt;enumeration value="linedraw"/>
 *     &lt;enumeration value="alpha8"/>
 *     &lt;enumeration value="prealpha8"/>
 *     &lt;enumeration value="screen"/>
 *     &lt;enumeration value="additive"/>
 *     &lt;enumeration value="additive_ss"/>
 *     &lt;enumeration value="multiply"/>
 *     &lt;enumeration value="subtractive"/>
 *     &lt;enumeration value="srccolor"/>
 *     &lt;enumeration value="hazeblend"/>
 *     &lt;enumeration value="alpha8_anark"/>
 *     &lt;enumeration value="screen_anark"/>
 *     &lt;enumeration value="multiply_anark"/>
 *     &lt;enumeration value="overlay_anark"/>
 *     &lt;enumeration value="bleach_anark"/>
 *     &lt;enumeration value="ghost_anark"/>
 *     &lt;enumeration value="saturate_anark"/>
 *     &lt;enumeration value="screen_glow"/>
 *     &lt;enumeration value="additive_glow"/>
 *     &lt;enumeration value="wireframe_overlay"/>
 *     &lt;enumeration value="alpha8_overlay"/>
 *     &lt;enumeration value="alpha8_single"/>
 *     &lt;enumeration value="additive_single"/>
 *     &lt;enumeration value="distortion"/>
 *     &lt;enumeration value="hair"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "blendmodelookup")
@XmlEnum
public enum Blendmodelookup {

    @XmlEnumValue("none")
    NONE("none"),
    @XmlEnumValue("wireframe")
    WIREFRAME("wireframe"),
    @XmlEnumValue("wireframe_noculling")
    WIREFRAME_NOCULLING("wireframe_noculling"),
    @XmlEnumValue("twosided")
    TWOSIDED("twosided"),
    @XmlEnumValue("alpha1")
    ALPHA_1("alpha1"),
    @XmlEnumValue("solid_fading")
    SOLID_FADING("solid_fading"),
    @XmlEnumValue("alpha1_fading")
    ALPHA_1_FADING("alpha1_fading"),
    @XmlEnumValue("linedraw")
    LINEDRAW("linedraw"),
    @XmlEnumValue("alpha8")
    ALPHA_8("alpha8"),
    @XmlEnumValue("prealpha8")
    PREALPHA_8("prealpha8"),
    @XmlEnumValue("screen")
    SCREEN("screen"),
    @XmlEnumValue("additive")
    ADDITIVE("additive"),
    @XmlEnumValue("additive_ss")
    ADDITIVE_SS("additive_ss"),
    @XmlEnumValue("multiply")
    MULTIPLY("multiply"),
    @XmlEnumValue("subtractive")
    SUBTRACTIVE("subtractive"),
    @XmlEnumValue("srccolor")
    SRCCOLOR("srccolor"),
    @XmlEnumValue("hazeblend")
    HAZEBLEND("hazeblend"),
    @XmlEnumValue("alpha8_anark")
    ALPHA_8_ANARK("alpha8_anark"),
    @XmlEnumValue("screen_anark")
    SCREEN_ANARK("screen_anark"),
    @XmlEnumValue("multiply_anark")
    MULTIPLY_ANARK("multiply_anark"),
    @XmlEnumValue("overlay_anark")
    OVERLAY_ANARK("overlay_anark"),
    @XmlEnumValue("bleach_anark")
    BLEACH_ANARK("bleach_anark"),
    @XmlEnumValue("ghost_anark")
    GHOST_ANARK("ghost_anark"),
    @XmlEnumValue("saturate_anark")
    SATURATE_ANARK("saturate_anark"),
    @XmlEnumValue("screen_glow")
    SCREEN_GLOW("screen_glow"),
    @XmlEnumValue("additive_glow")
    ADDITIVE_GLOW("additive_glow"),
    @XmlEnumValue("wireframe_overlay")
    WIREFRAME_OVERLAY("wireframe_overlay"),
    @XmlEnumValue("alpha8_overlay")
    ALPHA_8_OVERLAY("alpha8_overlay"),
    @XmlEnumValue("alpha8_single")
    ALPHA_8_SINGLE("alpha8_single"),
    @XmlEnumValue("additive_single")
    ADDITIVE_SINGLE("additive_single"),
    @XmlEnumValue("distortion")
    DISTORTION("distortion"),
    @XmlEnumValue("hair")
    HAIR("hair");
    private final String value;

    Blendmodelookup(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static Blendmodelookup fromValue(String v) {
        for (Blendmodelookup c: Blendmodelookup.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
