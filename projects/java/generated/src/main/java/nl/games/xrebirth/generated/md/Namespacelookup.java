//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.12.28 at 11:19:24 PM CET 
//


package nl.games.xrebirth.generated.md;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for namespacelookup.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="namespacelookup">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="this"/>
 *     &lt;enumeration value="static"/>
 *     &lt;enumeration value="default"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "namespacelookup")
@XmlEnum
public enum Namespacelookup {


    /**
     * 
     *             Use "this" cue as namespace, even for instances: $foo == this.$foo
     *           
     * 
     */
    @XmlEnumValue("this")
    THIS("this"),

    /**
     * 
     *             Same as "this", but when instantiated, use the static cue: $foo == static.$foo
     *           
     * 
     */
    @XmlEnumValue("static")
    STATIC("static"),

    /**
     * 
     *             By default the namespace is inherited from the parent cue. The default for root cues is same as "static".
     *           
     * 
     */
    @XmlEnumValue("default")
    DEFAULT("default");
    private final String value;

    Namespacelookup(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static Namespacelookup fromValue(String v) {
        for (Namespacelookup c: Namespacelookup.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
